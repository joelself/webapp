<!DOCTYPE html>
<head>
<meta charset="utf-8">
<style>

line {
  stroke: #ccc;
  stroke-width: 1;
}



</style>
</head>
<body>
<input type="text" id="input" value="10.0.0.2"></input><button type="button" onclick="doQuery()" >Find</button>
<p id="display"><svg width="600" height="600"></svg></p>
<p id="dbgarea">
</p>
<script src="http://d3js.org/d3.v4.js"></script>
<script>


var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height"),
    color = d3.scaleOrdinal(d3.schemeCategory10);

var edgesArray = [];
var nodesArray = [];

var simulation = d3.forceSimulation(nodesArray)
    .force("charge", d3.forceManyBody().strength(-500))
    .force("link", d3.forceLink(edgesArray).distance(150).strength(0.4).id(function(d) { return d.id; }))
    .force("x", d3.forceX())
    .force("y", d3.forceY())
    .alphaTarget(1)
    .on("tick", ticked);
var g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")"),
    link = g.append("g").attr("stroke", "#000").attr("stroke-width", 1.5).selectAll(".link"),
    node = g.append("g").attr("stroke", "#000").attr("stroke-width", 1.5).attr("class", "nodes").selectAll("g");
    text = g.append("g").attr("class", "labels").selectAll("g");
var circle;
restart([], [], []);
var nodes = new Map();
var edges = new Map();
var lastUpdate = 0;
var ws;
function doQuery() {
	var ip = document.getElementById("input").value;
	displayGraph('ws://127.0.0.1:9000/ip/' + ip + '/2');
    //ws.onmessage = function(evt) {
    //    document.getElementById("display").text = "Msg received from foo: " + evt.data;
    //}
    
}
var init = false;
function displayGraph(url) {
    ws = new WebSocket(url);
    ws.addEventListener('open', function (event) {
        //ws.send('Hello Server!');
        console.log("Sent message");
    });
    ws.onmessage = function(evt) {
        var newNodes = [];
        console.log(evt.data);
        console.log("got message");
        if(!evt.data)
            return;
        var json = JSON.parse(evt.data);

        var dbg = document.getElementById("dbgarea");
        if(init)
            dbg.innerHTML = "";
        json.nodesAdd.forEach(function(n) {
            n.index = nodesArray.length;
            n.id = "" + n.id;
            nodes.set(n.id, n);
            dbg.innerHTML = dbg.innerHTML + "<br>Added node: " + n.hostname + ", id: " + n.id;
            dbg.innerHTML = dbg.innerHTML + "<br>node: " + n.hostname + ", id: " + n.id + ", index: " + n.index;
            nodesArray.push(n);
            newNodes.push(n);
        });
        json.nodesDel.forEach(function(n) {
            nodesArray.splice(nodes.get(n.id).index, 1);
            nodes.delete(n.id);
            dbg.innerHTML = dbg.innerHTML + "<br>Deleted node: " + n.hostname + ", id: " + n.id;
        });
        json.edgesAdd.forEach(function(e) {
            e.source = "" + e.source;
            e.target = "" + e.target;
            e.index = edgesArray.length;
            edges.set(e.source + "," + e.target, e);
            dbg.innerHTML = dbg.innerHTML + "<br>Added edge source: " + e.source + ", target: " + e.target;
            dbg.innerHTML = dbg.innerHTML + "<br>edge source: " + e.source + ", index: " + nodes.get(e.source).index + ", target: " + e.target + ", index: "  + nodes.get(e.target).index;
            edgesArray.push({source: e.source, target: e.target});
        })
        json.edgesDel.forEach(function(e) {
            edgesArray.splice(edges.get(e.source + "," + e.target).index, 1) = null;
            dbg.innerHTML = dbg.innerHTML + "<br>Deleted edge source: " + e.source + ", target: " + e.target;
            edges.delete(e.source + "," + e.target);
        })
        console.log(newNodes);
        console.log(edgesArray);
        restart(nodesArray, newNodes, edgesArray);
    }
}
function restart(nodeArray, newNodes, edgeArray) {
  // Apply the general update pattern to the nodes.

  node = node.data(nodeArray, function(d) { return d.id;});

  node.exit().remove();
  prevNode = node;
  node = node.enter().append("g");
  node.append("circle").attr("fill", function(d) { return color(d.id); }).attr("r", 8).call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));
  node.append("text")
    .attr("dx", 12)
    .attr("y", ".35em")
    .style("font-family", "sans-serif")
    .style("font-size", "0.7em")
    .text(function(d) { return d.hostname + " - " + d.ip; });
  //node = node.selectAll("g");
  node = node.merge(prevNode);
  // Apply the general update pattern to the links.
  link = link.data(edgeArray, function(d) { return d.source.id + "-" + d.target.id; });
  link.exit().remove();
  link = link.enter().append("line").merge(link);

  // Update and restart the simulation.
  simulation.nodes(nodeArray);
  simulation.force("link").links(edgeArray);
  simulation.alpha(1).restart();
}
function ticked() {
  //text.attr("x", function(d) { return d.x; })
  //    .attr("y", function(d) { return d.y; });
  //circle.attr("cx", function(d) { return d.x; })
  //    .attr("cy", function(d) { return d.y; });

  node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

  link.attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });
}
function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function dragended(d) {
  if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}
</script>
</body>